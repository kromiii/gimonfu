<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"
      xmlns:app="http://www.w3.org/2007/app">

  <link rel="first" href="https://blog.hatena.ne.jp/basd4g/basd4g-private.hatenablog.com/atom/entry" />

  

  <title>basd4g-private’s diary</title>
  
  <link rel="alternate" href="https://basd4g-private.hatenablog.com/"/>
  <updated>2020-05-13T12:27:36+09:00</updated>
  <author>
    <name>basd4g</name>
  </author>
  <generator uri="https://blog.hatena.ne.jp/" version="ca057f7d39f4cbf0098502c82262628b">Hatena::Blog</generator>
  <id>hatenablog://blog/26006613562806260</id>

  
  <entry>
<id>tag:blog.hatena.ne.jp,2013:blog-basd4g-26006613562806260-26006613563256659</id>
<link rel="edit" href="https://blog.hatena.ne.jp/basd4g/basd4g-private.hatenablog.com/atom/entry/26006613563256659"/>
<link rel="alternate" type="text/html" href="https://basd4g-private.hatenablog.com/entry/privateMethodTest-newPath"/>
<author><name>basd4g</name></author>
<title>TypeScriptでprivate methodを外部から呼ぶ</title>
<updated>2019-10-17T11:50:00+09:00</updated>
<published>2020-05-07T09:49:55+09:00</published>
<app:edited>2020-05-16T23:32:25+09:00</app:edited>
<summary type="text">題名通りの話。 TypeScriptにてprivate methodを単体テストするとき、直接呼べないので困ることがある。 private methodを外部から呼べないのは正しいふるまいだが、テストプログラム側からも呼べないのは不便だ。裏技的ではあるが、TypeScriptの制…</summary>
<content type="text/x-markdown">題名通りの話。

TypeScriptにてprivate methodを単体テストするとき、直接呼べないので困ることがある。
private methodを外部から呼べないのは正しいふるまいだが、テストプログラム側からも呼べないのは不便だ。裏技的ではあるが、TypeScriptの制限を回避して呼ぶ方法があるので紹介する。

## 前提 TypeScriptのprivate

JavaScript(ES6~)では、class記法が使える。  
TypeScriptではclass記法で書かれたmethodにprivate修飾子をつけることが出来る。
private修飾子をつけると、同じクラス内からしかmethodを呼べない。

具体的な記法は下の例を参照のこと。

## 解決策

TypeScriptのprivate修飾子によるアクセス制限を回避する方法は2つある。  

`hogeClass.privateMethod()`だと呼べないときを例に取ると

### 1. brackets記法

`hogeClass[&#39;privateMethod&#39;]()`と呼ぶ。

### 2. クラスをanyでキャストする

`;(hogeClass as any).privateMethod()`と呼ぶ。

前文との間に`;`を入れないとエラーを出すので注意。

## 例

```ts
// TypeScript v3.5.3

class HogeClass {

  private privateMethod (): void {
    console.log(&quot;private method&quot;)
  }

  public publicMethod ():void {
    console.log(&#39;public method&#39;)

    //呼べる
    this.privateMethod()
  }
}

const hogeClass = new HogeClass()

// 呼べる
hogeClass.publicMethod()

// 呼べない コンパイルエラー
// hogeClass.privateMethod()

// 呼べる
hogeClass[&#39;privateMethod&#39;]()

// 呼べる セミコロンが必要
;(hogeClass as any).publicMethod()
```

## 注意

TypeScriptの制限をすり抜けるということは、methodが存在するかどうか評価されないので、typoしたり存在しないmethodを呼ぶ危険性がある。

テストで使うのは仕方ないかもしれないけれど、基本はあまり使うべきではなさそう。

## 感想

anyでキャストして呼べるのはまだいいとして、brackets記法で呼べてしまうのは裏技感がすごい。
最近TypeScriptに入門したが、型があるのはありがたいといっても、意外と実行時にこのような抜けがあると感じてしまうことがあったり。

まぁjsやからな。

## 参考

- [Typescriptでprivateメソッドをテストする](qiita.com/hitochan777/items/f68e77f13becd24e2691)
</content>
<hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;題名通りの話。&lt;/p&gt;

&lt;p&gt;TypeScriptにてprivate methodを&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%C3%B1%C2%CE%A5%C6%A5%B9%A5%C8&quot;&gt;単体テスト&lt;/a&gt;するとき、直接呼べないので困ることがある。
private methodを外部から呼べないのは正しいふるまいだが、テストプログラム側からも呼べないのは不便だ。裏技的ではあるが、TypeScriptの制限を回避して呼ぶ方法があるので紹介する。&lt;/p&gt;

&lt;h2&gt;前提 TypeScriptのprivate&lt;/h2&gt;

&lt;p&gt;&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/JavaScript&quot;&gt;JavaScript&lt;/a&gt;(ES6~)では、class記法が使える。&lt;br /&gt;
TypeScriptではclass記法で書かれたmethodにprivate修飾子をつけることが出来る。
private修飾子をつけると、同じクラス内&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/%A4%AB%A4%E9%A4%B7&quot;&gt;からし&lt;/a&gt;かmethodを呼べない。&lt;/p&gt;

&lt;p&gt;具体的な記法は下の例を参照のこと。&lt;/p&gt;

&lt;h2&gt;解決策&lt;/h2&gt;

&lt;p&gt;TypeScriptのprivate修飾子によるアクセス制限を回避する方法は2つある。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hogeClass.privateMethod()&lt;/code&gt;だと呼べないときを例に取ると&lt;/p&gt;

&lt;h3&gt;1. &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/brackets&quot;&gt;brackets&lt;/a&gt;記法&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hogeClass[&#39;privateMethod&#39;]()&lt;/code&gt;と呼ぶ。&lt;/p&gt;

&lt;h3&gt;2. クラスをanyでキャストする&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;;(hogeClass as any).privateMethod()&lt;/code&gt;と呼ぶ。&lt;/p&gt;

&lt;p&gt;前文との間に&lt;code&gt;;&lt;/code&gt;を入れないとエラーを出すので注意。&lt;/p&gt;

&lt;h2&gt;例&lt;/h2&gt;

&lt;pre class=&quot;code ts&quot; data-lang=&quot;ts&quot; data-unlink&gt;// TypeScript v3.5.3

class HogeClass {

  private privateMethod (): void {
    console.log(&amp;#34;private method&amp;#34;)
  }

  public publicMethod ():void {
    console.log(&amp;#39;public method&amp;#39;)

    //呼べる
    this.privateMethod()
  }
}

const hogeClass = new HogeClass()

// 呼べる
hogeClass.publicMethod()

// 呼べない コンパイルエラー
// hogeClass.privateMethod()

// 呼べる
hogeClass[&amp;#39;privateMethod&amp;#39;]()

// 呼べる セミコロンが必要
;(hogeClass as any).publicMethod()&lt;/pre&gt;


&lt;h2&gt;注意&lt;/h2&gt;

&lt;p&gt;TypeScriptの制限をすり抜けるということは、methodが存在するかどうか評価されないので、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/typo&quot;&gt;typo&lt;/a&gt;したり存在しないmethodを呼ぶ危険性がある。&lt;/p&gt;

&lt;p&gt;テストで使うのは仕方ないかもしれないけれど、基本はあまり使うべきではなさそう。&lt;/p&gt;

&lt;h2&gt;感想&lt;/h2&gt;

&lt;p&gt;anyでキャストして呼べるのはまだいいとして、&lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/brackets&quot;&gt;brackets&lt;/a&gt;記法で呼べてしまうのは裏技感がすごい。
最近TypeScriptに入門したが、型があるのはありがたいといっても、意外と実行時にこのような抜けがあると感じてしまうことがあったり。&lt;/p&gt;

&lt;p&gt;まぁjsやからな。&lt;/p&gt;

&lt;h2&gt;参考&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;qiita.com/hitochan777/items/f68e77f13becd24e2691&quot;&gt;Typescriptでprivateメソッドをテストする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</hatena:formatted-content>

<category term="TypeScript" />

<category term="JavaScript" />

<category term="テスト" />

<app:control>
  <app:draft>no</app:draft>
</app:control>

  </entry>
  
  <entry>
<id>tag:blog.hatena.ne.jp,2013:blog-basd4g-26006613562806260-26006613562946671</id>
<link rel="edit" href="https://blog.hatena.ne.jp/basd4g/basd4g-private.hatenablog.com/atom/entry/26006613562946671"/>
<link rel="alternate" type="text/html" href="https://basd4g-private.hatenablog.com/entry/2020/05/06/190022"/>
<author><name>basd4g</name></author>
<title>No Title</title>
<updated>2020-05-06T19:00:22+09:00</updated>
<published>2020-05-06T19:00:23+09:00</published>
<app:edited>2020-05-06T19:00:23+09:00</app:edited>
<summary type="text">hatenablog-post Post article of markdown file to hatena-blog. $ yarn global add basd4g/hatenablog-post $ export HATENA_USER=... $ export HAT…</summary>
<content type="text/x-markdown"># hatenablog-post

Post article of markdown file to hatena-blog.

```sh
$ yarn global add basd4g/hatenablog-post
$ export HATENA_USER=...
$ export HATENA_API_KEY=...
$ export HATENA_BLOG_ID=...

$ hatenablog-post -f path/to/markdown
```

</content>
<hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;h1&gt;hatenablog-post&lt;/h1&gt;

&lt;p&gt;Post article of &lt;a class=&quot;keyword&quot; href=&quot;http://d.hatena.ne.jp/keyword/markdown&quot;&gt;markdown&lt;/a&gt; file to hatena-blog.&lt;/p&gt;

&lt;pre class=&quot;code lang-sh&quot; data-lang=&quot;sh&quot; data-unlink&gt;$ yarn global add basd4g/hatenablog-post
$ &lt;span class=&quot;synStatement&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; HATENA_USER=&lt;/span&gt;...
$ &lt;span class=&quot;synStatement&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; HATENA_API_KEY=&lt;/span&gt;...
$ &lt;span class=&quot;synStatement&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;synIdentifier&quot;&gt; HATENA_BLOG_ID=&lt;/span&gt;...

$ hatenablog-post &lt;span class=&quot;synSpecial&quot;&gt;-f&lt;/span&gt; path/to/markdown
&lt;/pre&gt;

</hatena:formatted-content>

<app:control>
  <app:draft>no</app:draft>
</app:control>

  </entry>
  
  <entry>
<id>tag:blog.hatena.ne.jp,2013:blog-basd4g-26006613562806260-26006613562856760</id>
<link rel="edit" href="https://blog.hatena.ne.jp/basd4g/basd4g-private.hatenablog.com/atom/entry/26006613562856760"/>
<link rel="alternate" type="text/html" href="https://basd4g-private.hatenablog.com/entry/hello"/>
<author><name>basd4g</name></author>
<title>ブログを書く意義</title>
<updated>2019-09-17T01:37:00+09:00</updated>
<published>2020-05-06T16:14:27+09:00</published>
<app:edited>2020-05-17T02:51:12+09:00</app:edited>
<summary type="text">TL;DR 初投稿に際して自分に向けたポエム 記事を書くためにブログを作った。 ブログをはじめるにあたり、はじめるに至った理由を綴る。 (自分に書く価値を再認識させることで、記事を書く動機を強める狙い) ブログを書く意義 asdfas 文章執筆 わかりやすく完結な文章を書くには推…</summary>
<content type="text/x-markdown">TL;DR 初投稿に際して自分に向けたポエム

記事を書くためにブログを作った。

ブログをはじめるにあたり、はじめるに至った理由を綴る。
(自分に書く価値を再認識させることで、記事を書く動機を強める狙い)

## ブログを書く意義
asdfas
### 文章執筆

わかりやすく完結な文章を書くには推敲した上である程度時間を掛ける必要がある。
文章の執筆能力を高めるためにブログを書くことにした。

### 思考を整理する

最近アウトプットすることの重要性に気づいた。

アウトプットする事柄は、自分の中で理解し整理されているものでなければならない。
今までの私は、こと情報系に関してインプットの機会が多かった。
だからこそ自分の文章を公開することで、インプットした内容を整理する機会としたい。

### 誰かのために

私は開発していて詰まることがよくある。例えば「ライブラリを入れたけど動かない」「エラーを吐いて動かない」等。

このような私が開発していて詰まったことと解決策を記録することで、同じ問題を抱えている誰か(もしくは未来の私)に向けたヒントになればという思いがある。

私が解決策を示す文章を書く手間が、私や誰かが問題解決にかける手間より小さいならば、とても価値のある記事がかけたということである。

## まとめ

そんなわけで、次の目的で思ったことや知ったことを書き留めていきたい。

- 文章執筆の場
- 思考を整理する場
- 誰かのためにハウツーを記録する場

  
</content>
<hatena:formatted-content type="text/html" xmlns:hatena="http://www.hatena.ne.jp/info/xmlns#">&lt;p&gt;TL;DR 初投稿に際して自分に向けたポエム&lt;/p&gt;

&lt;p&gt;記事を書くためにブログを作った。&lt;/p&gt;

&lt;p&gt;ブログをはじめるにあたり、はじめるに至った理由を綴る。
(自分に書く価値を再認識させることで、記事を書く動機を強める狙い)&lt;/p&gt;

&lt;h2&gt;ブログを書く意義&lt;/h2&gt;

&lt;p&gt;asdfas&lt;/p&gt;

&lt;h3&gt;文章執筆&lt;/h3&gt;

&lt;p&gt;わかりやすく完結な文章を書くには推敲した上である程度時間を掛ける必要がある。
文章の執筆能力を高めるためにブログを書くことにした。&lt;/p&gt;

&lt;h3&gt;思考を整理する&lt;/h3&gt;

&lt;p&gt;最近アウトプットすることの重要性に気づいた。&lt;/p&gt;

&lt;p&gt;アウトプットする事柄は、自分の中で理解し整理されているものでなければならない。
今までの私は、こと情報系に関してインプットの機会が多かった。
だからこそ自分の文章を公開することで、インプットした内容を整理する機会としたい。&lt;/p&gt;

&lt;h3&gt;誰かのために&lt;/h3&gt;

&lt;p&gt;私は開発していて詰まることがよくある。例えば「ライブラリを入れたけど動かない」「エラーを吐いて動かない」等。&lt;/p&gt;

&lt;p&gt;このような私が開発していて詰まったことと解決策を記録することで、同じ問題を抱えている誰か(もしくは未来の私)に向けたヒントになればという思いがある。&lt;/p&gt;

&lt;p&gt;私が解決策を示す文章を書く手間が、私や誰かが問題解決にかける手間より小さいならば、とても価値のある記事がかけたということである。&lt;/p&gt;

&lt;h2&gt;まとめ&lt;/h2&gt;

&lt;p&gt;そんなわけで、次の目的で思ったことや知ったことを書き留めていきたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文章執筆の場&lt;/li&gt;
&lt;li&gt;思考を整理する場&lt;/li&gt;
&lt;li&gt;誰かのためにハウツーを記録する場&lt;/li&gt;
&lt;/ul&gt;

</hatena:formatted-content>

<category term="ポエム" />

<app:control>
  <app:draft>no</app:draft>
</app:control>

  </entry>
  
</feed>
